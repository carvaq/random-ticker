apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.oss.licenses.plugin'
apply plugin: 'com.github.triplet.play'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

apply from: 'release_config.gradle'

def getGitVersionName = { ->
	String tag = ("git describe --abbrev=0 --tags").execute().text.trim()
	if (tag.contains('/') && tag.contains('.')) {
		return tag.substring(tag.indexOf('/') + 1, tag.length())
	} else {
		throw new Exception("tag has no slashes or a period [${tag}]")
	}
}

def parseVersionCode = {
	String versionName = gitVersionName
	def versionCodeParts = versionName.tokenize('.')
	int decimals = Integer.parseInt(versionCodeParts.get(1))
	String formattedVersionCode = String.format("%s%02d%02d", versionCodeParts.get(0), decimals, runner)
	def versionCode = Integer.parseInt(formattedVersionCode)
	println "Version name: ${versionName}  Version code: ${versionCode}"
	return versionCode
}

ext {
	runner = 1
	gitVersionName = getGitVersionName()
	gitVersionCode = parseVersionCode(gitVersionName)
}

kapt {
	generateStubs = false
}

android {
	compileSdkVersion Versions.compileVersion
	buildToolsVersion Versions.buildToolsVersion
	defaultConfig {
		applicationId "com.cvv.fanstaticapps.randomticker"
		minSdkVersion Versions.minSdkVersion
		targetSdkVersion Versions.targeSdkVersion
		versionCode gitVersionCode
		versionName gitVersionName
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

		kapt {
			arguments {
				arg("room.schemaLocation", "$projectDir/schemas".toString())
			}
		}
	}
	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.release
		}
	}

	testOptions {
		unitTests {
			includeAndroidResources = true
		}
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
}

dependencies {

	implementation Kotlin.stdlib
	implementation AndroidLibs.material
	implementation AndroidLibs.cardview
	implementation AndroidLibs.appcompat
	implementation Libs.pulsator
	implementation Libs.grenade
	implementation Libs.dagger
	implementation Libs.dagger_android
	implementation Libs.dagger_android_support
	implementation Firebase.crashlytics
	implementation AndroidLibs.constraint_layout
	implementation AndroidLibs.room_runtime
	implementation AndroidLibs.room_rxjava2
	implementation Libs.rxAndroid
	implementation Gms.oss
	implementation Libs.timber


	kapt AndroidLibs.room_compiler
	kapt Libs.dagger_compiler
	kapt Libs.dagger_android_processor
	kapt Libs.grenade_processor

	testImplementation TestLibs.mockito_core
	testImplementation TestLibs.junit
	testImplementation TestLibs.robolectric
	testImplementation TestLibs.mockito_kotlin

	androidTestImplementation AndroidLibs.uiautomator
	androidTestImplementation AndroidLibs.rules
	androidTestImplementation AndroidLibs.espresso_core

}


apply plugin: 'com.google.gms.google-services'
